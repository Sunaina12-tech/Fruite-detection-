# -*- coding: utf-8 -*-
"""Object(Fruite) Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gkIEQsiD-JEe60IdASbGt9SX5L0bgvsw

# Importing Dataset
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Importing Libraries"""

import numpy as np
import tensorflow as tf
#from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

"""# Data Preprocessing
## Training Image preprocessing
"""

training_set = tf.keras.utils.image_dataset_from_directory('/content/drive/MyDrive/fruite classification/Fruits Classification/train',
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(64, 64),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation="bilinear",
    follow_links=False,
    crop_to_aspect_ratio=False
)

"""##Validation Image Preprocessing"""

validation_set = tf.keras.utils.image_dataset_from_directory('/content/drive/MyDrive/fruite classification/Fruits Classification/valid',
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(64, 64),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation="bilinear",
    follow_links=False,
    crop_to_aspect_ratio=False
)

"""#Building Model"""

cnn = tf.keras.models.Sequential()

"""# Building Convolution Layer"""

cnn.add(tf.keras.layers.Conv2D(filters=32,kernel_size=3,padding='same',activation='relu',input_shape=[64,64,3]))
cnn.add(tf.keras.layers.Conv2D(filters=32,kernel_size=3,activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))

cnn.add(tf.keras.layers.Dropout(0.25))

cnn.add(tf.keras.layers.Conv2D(filters=64,kernel_size=3,padding='same',activation='relu'))
cnn.add(tf.keras.layers.Conv2D(filters=64,kernel_size=3,activation='relu'))
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))

cnn.add(tf.keras.layers.Dropout(0.25))

cnn.add(tf.keras.layers.Flatten())

cnn.add(tf.keras.layers.Dense(units=512,activation='relu'))

cnn.add(tf.keras.layers.Dense(units=256,activation='relu'))

cnn.add(tf.keras.layers.Dropout(0.5)) #To avoid overfitting

#Output Layer
cnn.add(tf.keras.layers.Dense(units=5,activation='softmax'))

"""# Compiling and Training Phase"""

cnn.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])


cnn.summary()

training_history = cnn.fit(x=training_set,validation_data=validation_set,epochs=32)

"""# Evaluating Model"""

#Training set Accuracy
train_loss, train_acc = cnn.evaluate(training_set)
print('Training accuracy:', train_acc)

#Validation set Accuracy
val_loss, val_acc = cnn.evaluate(validation_set)
print('Validation accuracy:', val_acc)

"""# Saving Model"""

cnn.save('trained_model.h5')

training_history.history #Return Dictionary of history

#Recording History in json
import json
with open('training_hist.json','w') as f:
  json.dump(training_history.history,f)

print(training_history.history.keys())

"""# Calculating Accuracy of Model Achieved on Validation set"""

print("Validation set Accuracy: {} %".format(training_history.history['val_accuracy'][-1]*100))

"""# **Accuracy Visualization**
## Training Visualization
"""

#training_history.history['accuracy']
epochs = [i for i in range(1,33)]
plt.plot(epochs,training_history.history['accuracy'],color='red')
plt.xlabel('No. of Epochs')
plt.ylabel('Traiining Accuracy')
plt.title('Visualization of Training Accuracy Result')
plt.show()

"""## Validation Accuracy"""

plt.plot(epochs,training_history.history['val_accuracy'],color='blue')
plt.xlabel('No. of Epochs')
plt.ylabel('Validation Accuracy')
plt.title('Visualization of Validation Accuracy Result')
plt.show()

"""# Test set Evaluation"""

test_set = tf.keras.utils.image_dataset_from_directory(
    '/content/drive/MyDrive/fruite classification/Fruits Classification/test',
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(64, 64),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation="bilinear",
    follow_links=False,
    crop_to_aspect_ratio=False
)

test_loss,test_acc = cnn.evaluate(test_set)
print('Test accuracy:', test_acc)

"""# **Testing_fruit_recognition**"""

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

"""# Test set Image Processing"""

test_set = tf.keras.utils.image_dataset_from_directory(
    '/content/drive/MyDrive/fruite classification/Fruits Classification/test',
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(64, 64),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation="bilinear",
    follow_links=False,
    crop_to_aspect_ratio=False
)

"""# Loading Model"""

cnn = tf.keras.models.load_model('/content/trained_model.h5')

"""# Visualising and Performing Prediction on Single image"""

#Test Image Visualization
import cv2
image_path = '/content/drive/MyDrive/fruite classification/Fruits Classification/test/Banana/Banana (2044).jpeg'
# Reading an image in default mode
img = cv2.imread(image_path)
img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB) #Converting BGR to RGB
# Displaying the image
plt.imshow(img)
plt.title('Test Image')
plt.xticks([])
plt.yticks([])
plt.show()

"""# Testing Model"""

image = tf.keras.preprocessing.image.load_img(image_path,target_size=(64,64))
input_arr = tf.keras.preprocessing.image.img_to_array(image)
input_arr = np.array([input_arr])  # Convert single image to a batch.
predictions = cnn.predict(input_arr)

print(predictions)

# test_set.class_names
result_index = np.argmax(predictions) #Return index of max element
print(result_index)

# Displaying the image
plt.imshow(img)
plt.title('Test Image')
plt.xticks([])
plt.yticks([])
plt.show()

#Single image Prediction
print("It's a {}".format(test_set.class_names[result_index]))